spring:
  application:
    # UNIQUE NAME OF THIS MICROSERVICE
    name: airport-flight-service
  # ANSI CONSOLE OUTPUT (COLOR LOGS WILL BE DISPLAYED)
  output:
    ansi:
      enabled: ALWAYS
  # DATABASE CREDENTIALS
  datasource:
    url: 'jdbc:mysql://mysql:3306/airportdb'
    username: airportuser
    password: airportpass
  # ZIPKIN SERVER URL
  zipkin:
    base-url: 'http://zipkin:9411'

server:
  # SERVER PORT OF THIS MICROSERVICE - MUST MATCH DOCKER COMPOSE
  port: 8082

# EUREKA SERVER URL
eureka:
  client:
    service-url:  # Changed from 'service.url' to 'service-url'
      defaultZone: 'http://eureka-server:8761/eureka'
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    hostname: airport-flight-service
    instance-id: ${spring.application.name}:${server.port}

# SPRING CLOUD CIRCUIT BREAKER WITH RESILIENCE4J IMPLEMENTATION
# Spring Cloud Circuit breaker provides an abstraction across different circuit breaker implementations
# i.e Hystrix, Resilience4j, Sentinel, Spring Retry
# circuit breaker switch is indicated with following terms
# i.e. UP means switch is closed and so allowed all the calls closed - UP, open - DOWN, half-open - UNKNOWN
resilience4j:
  circuitbreaker:
    instances:
      airportPilotService:
        # slidingWindowSize indicate (e.g. 5) after how many calls the switch will be open or close
        slidingWindowSize: 5
        # we are now setting threshold value here like failure rate is greater then 60% make the switch open(DOWN)
        failureRateThreshold: 60
        # switch will wait 50 seconds in open(DOWN) state so the down service airport-pilot-service get 50 seconds to recover
        waitDurationInOpenState: 50000
        # after 50 seconds making switch as half open
        automaticTransitionFromOpenToHalfOpenEnabled: true
        # allow 4 calls in half-open state of switch
        permittedNumberOfCallsInHalfOpenState: 4
        allowHealthIndicatorToFail: true
        registerHealthIndicator: true

# ACTUATOR WEB ENDPOINTS EXPOSURE
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        # EXPOSE ALL THE ACTUATOR WEB ENDPOINTS INCLUDING PROMETHEUS
        include: "*"
  endpoint:
    health:
      show-details: always
  # ENABLE PROMETHEUS METRICS
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        resilience4j.circuitbreaker.calls: true
      sla:
        http.server.requests: 50ms,100ms,200ms,400ms

# SWAGGER-UI CUSTOM URL
springdoc:
  swagger-ui:
    path: /swagger-ui.html

# AIRPORT-PILOT-SERVICE URL
airport:
  pilot:
    service:
      url: 'http://airport-pilot-service:8081'

# DEBUG LOGGING
logging:
  level:
    com.netflix.eureka: DEBUG
    com.netflix.discovery: DEBUG