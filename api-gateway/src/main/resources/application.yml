server:
  port: 2021

spring:
  application:
    name: api-gateway
  output:
    ansi:
      enabled: ALWAYS
  cloud:
    gateway:
      # default-filters:
      #   - JwtAuthFilter
      discovery:
        locator:
          enabled: false
          lower-case-service-id: true
      routes:
        # Auth routes - NO JWT filter applied
        - id: auth
          uri: http://localhost:8087
          predicates:
            - Path=/auth/**
          filters:
            - StripPrefix=0

        - id: airport-auth-service
          uri: lb://airport-auth-service
          predicates:
            - Path=/airport-auth-service/**
          filters:
            - StripPrefix=1

        # Protected routes - JWT filter applied individually
        - id: airport-pilot-service-get
          uri: lb://airport-pilot-service
          predicates:
            - Path=/airport-pilot-service/**
            - Method=GET
          filters:
            - StripPrefix=1
            - JwtAuthFilter  # Apply JWT filter only to protected routes

        - id: airport-pilot-service-block
          uri: no://op
          predicates:
            - Path=/airport-pilot-service/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: SetStatus
              args:
                status: 405

        - id: airport-flight-service-get
          uri: lb://airport-flight-service
          predicates:
            - Path=/airport-flight-service/**
            - Method=GET
          filters:
            - StripPrefix=1
            - JwtAuthFilter

        - id: airport-flight-service-block
          uri: no://op
          predicates:
            - Path=/airport-flight-service/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: SetStatus
              args:
                status: 405

        - id: airport-bookings-service-get
          uri: lb://airport-bookings-service
          predicates:
            - Path=/airport-bookings-service/**
            - Method=GET
          filters:
            - StripPrefix=1
            - JwtAuthFilter

        - id: airport-bookings-service-block
          uri: no://op
          predicates:
            - Path=/airport-bookings-service/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: SetStatus
              args:
                status: 405

        - id: airport-security-service-get
          uri: lb://airport-security-service
          predicates:
            - Path=/airport-security-service/**
            - Method=GET
          filters:
            - StripPrefix=1
            - JwtAuthFilter

        - id: airport-security-service-block
          uri: no://op
          predicates:
            - Path=/airport-security-service/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: SetStatus
              args:
                status: 405

        - id: airport-checkin-service-get
          uri: lb://airport-checkin-service
          predicates:
            - Path=/airport-checkin-service/**
            - Method=GET
          filters:
            - StripPrefix=1
            - JwtAuthFilter

        - id: airport-checkin-service-block
          uri: no://op
          predicates:
            - Path=/airport-checkin-service/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: SetStatus
              args:
                status: 405

        - id: airport-boarding-service-get
          uri: lb://airport-boarding-service
          predicates:
            - Path=/airport-boarding-service/**
            - Method=GET
          filters:
            - StripPrefix=1
            - JwtAuthFilter

        - id: airport-boarding-service-block
          uri: no://op
          predicates:
            - Path=/airport-boarding-service/**
            - Method=POST,PUT,DELETE,PATCH
          filters:
            - name: SetStatus
              args:
                status: 405

  sleuth:
    reactor:
      instrumentation-type: decorate-on-each

eureka:
  client:
    service-url:
      defaultZone: 'http://eureka-server:8761/eureka'
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    hostname: api-gateway
    instance-id: ${spring.application.name}:${server.port}

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      sla:
        http.server.requests: 50ms,100ms,200ms,400ms

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web.reactive: DEBUG
    com.netflix.eureka: DEBUG
    com.netflix.discovery: DEBUG

gateway:
  security:
    ip-filter-enabled: true
    allowed-ips: "*"
    blocked-ips: "192.168.1.50,10.0.0.100"

app:
  jwt:
    secret: 19436925818d0bc4151f09eeedafebaeaabc1e8cc93f98afce5205973be8d283658a2311461af2cf9cd8f7c0d2bcfd1ed64905427533d247de27b9e65efac00b
    issuer: airport-auth