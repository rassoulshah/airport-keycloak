########## N O T E ########## 
# Spring Cloud API Gateway does load balancing for a microservice instances automatically
# It means we don't need to use implement Spring Cloud Load Balancer if we use Spring Cloud API Gateway
# You can test this scenario by running airport-pilot-service two times (on two ports 8081 and 9081) and check how the load balancing happening for requests on round robbin passion */
# Spring Cloud Load Balancer is a replacement of Ribbon. (Spring Cloud Netflix Ribbon has been deprecated).

server:
  # PORT OF API-GATEWAY
  port: 2021

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          # Keycloak realm certs (JWKS) - used to validate incoming tokens
          jwk-set-uri: http://keycloak:8080/realms/airport-realm/protocol/openid-connect/certs
  application:
    # UNIQUE NAME OF API-GATEWAY
    name: api-gateway
  # ANSI CONSOLE OUTPUT (COLOR LOGS WILL BE DISPLAYED)
  output:
    ansi:
      enabled: ALWAYS
  cloud:
    gateway:
      discovery:
        locator:
          # DISABLE AUTO DISCOVERY TO USE CUSTOM ROUTES
          enabled: false
          # MICROSERVICE NAMES IN EUREKA SERVER WILL BE HANDLED IN LOWERCASE
          lower-case-service-id: true
      # DEFINE CUSTOM ROUTES WITH METHOD FILTERING
      routes:
        # Pilot Service Routes
        - id: airport-pilot-service
          uri: lb://airport-pilot-service
          predicates:
            - Path=/airport-pilot-service/**
          filters:
            - StripPrefix=1
            - name: JwtAuthorization
              args:
                enabled: true
                protectedServicesForGet: 
                  - pilot
                  - checkin 
                  - security

        # Flight Service Routes  
        - id: airport-flight-service
          uri: lb://airport-flight-service
          predicates:
            - Path=/airport-flight-service/**
          filters:
            - StripPrefix=1
            - name: JwtAuthorization
              args:
                enabled: true
                protectedServicesForGet: []

        # Booking Service Routes
        - id: airport-bookings-service
          uri: lb://airport-bookings-service
          predicates:
            - Path=/airport-bookings-service/**
          filters:
            - StripPrefix=1
            - name: JwtAuthorization
              args:
                enabled: true
                protectedServicesForGet: []

        # Security Service Routes
        - id: airport-security-service
          uri: lb://airport-security-service
          predicates:
            - Path=/airport-security-service/**
          filters:
            - StripPrefix=1
            - name: JwtAuthorization
              args:
                enabled: true
                protectedServicesForGet: 
                  - security

        # Check-in Service Routes
        - id: airport-checkin-service
          uri: lb://airport-checkin-service
          predicates:
            - Path=/airport-checkin-service/**
          filters:
            - StripPrefix=1
            - name: JwtAuthorization
              args:
                enabled: true
                protectedServicesForGet: 
                  - checkin

        # Boarding Service Routes
        - id: airport-boarding-service
          uri: lb://airport-boarding-service
          predicates:
            - Path=/airport-boarding-service/**
          filters:
            - StripPrefix=1
            - name: JwtAuthorization
              args:
                enabled: true
                protectedServicesForGet: []

  # SLEUTH PROPERTY
  sleuth:
    reactor:
      instrumentation-type: decorate-on-each

# EUREKA SERVER URL
eureka:
  client:
    service-url:  # Changed from 'service.url' to 'service-url'
      defaultZone: 'http://eureka-server:8761/eureka'
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    hostname: api-gateway
    instance-id: ${spring.application.name}:${server.port}

# ACTUATOR WEB ENDPOINTS EXPOSURE
management:
  endpoints:
    web:
      exposure:
        # EXPOSE ALL THE ACTUATOR WEB ENDPOINTS IF SECURITY IS NOT YOUR CONCERN!
        include: "*"
  # GET DETAIL INFORMATION OF ACTUATOR HEALTH ENDPOINT
  endpoint:
    health:
      show-details: always
  # ENABLE PROMETHEUS METRICS
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      sla:
        http.server.requests: 50ms,100ms,200ms,400ms

# DEBUG LOGGING
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web.reactive: DEBUG
    com.netflix.eureka: DEBUG
    com.netflix.discovery: DEBUG

# IP ACCESS CONTROL CONFIGURATION
gateway:
  security:
    # Enable or disable IP filtering
    ip-filter-enabled: true

    # ALLOWED IPs (comma-separated) - if empty, all IPs are allowed (except blocked ones)
    # Supports: exact IPs, CIDR notation, wildcards
    # Examples: 192.168.1.100,10.0.0.0/8,172.16.*.*
    allowed-ips: "*"

    # BLOCKED IPs (comma-separated) - these IPs will be blocked regardless of allowlist
    # Examples: 192.168.1.50,10.0.0.100,172.16.1.0/24
    blocked-ips: "192.168.1.50,10.0.0.100"